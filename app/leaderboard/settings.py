"""
Django settings for leaderboard project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
# 파일 시스템 경로와 관련된 작업을 수행
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 프로젝트 루트폴더, 설정 파일이나 py파일 등에서 프로젝트의 루트 폴더를 찾아
# 그 하위를 탐색한다거나 하는 일들을 빈번하게 수행. 때문에 변수로 미리 준비해두는 값
# __file__은 현재 스크립트 또는 모듈의 경로를 나타냄
# resolve()는 경로 내의 심볼릭 링크를 해결
# parent.parent는 부모 디렉터리의 부모를 반환하여 효과적으로 디렉터리 구조를 두 단계 올라감
# 요약 : BASE_DIR 변수에 현재 스크립트 파일의 경로를 기준으로 한 부모 디렉토리의 경로를 할당합니다.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 다양한 보안을 위해 사용됨. 세션값의 보호나 비밀번호 변경시 사용되는
# 보안 URL을 만드는 등의 일에 주로 사용합니다. 임의로 변경할 수 있으나
# 변경하면 로그인이 풀리는 등의 부작용이 있다.
# 요약 :os.environ.get()을 사용하여 환경 변수 "SECRET_KEY"의 값을 검색
# 환경 변수가 설정되어 있지 않으면 기본값 "KDT"를 할당
SECRET_KEY = os.environ.get("SECRET_KEY", "KDT")

# SECURITY WARNING: don't run with debug turned on in production!
# 디버그 모드 설정 True일 경우 다양한 오류 메세지 확인
# 실제 배포할 때는 False로 바꾸며, 이 때는 다른 설정값을 이용해 관리자가
# 오류메세지를 받아 보게 설정할 수 있다.
# 환경 변수가 설정되어 있지 않으면 기본값 1을 할당
# 값은 int() 함수를 사용하여 정수로 변환됨
DEBUG = int(os.environ.get("DEBUG", default=1))

# 현재 서비스의 호스트를 설정. 실제 도메인을 기록하길 권장하며,
# DNS Rebinding을 막기위한 조지이다. 디버그가 False일때 host 값이
# 비어있으면 서비스를 시작할 수 없다.
# os.environ.get()을 사용하여 환경 변수 "DJANGO_ALLOWED_HOSTS"의 값을 가져옴
# 환경 변수가 설정되어 있지 않으면 기본값 "localhost 127.0.0.1 [::1]"을 할당
# 가져온 값은 split() 메서드를 사용하여 공백(" ")을 기준으로 목록으로 분할됨
ALLOWED_HOSTS = os.environ.get(
    "DJANGO_ALLOWED_HOSTS", "localhost 127.0.0.1 [::1]"
).split(" ")


# Application definition
# 장고에서 쓰이는 앱의 목록을 기록하고 관리
INSTALLED_APPS = [
    # 장고 어드민 인터페이스를 제공하는 애플리케이션
    "django.contrib.admin",
    # 인증 및 권한 기능을 관리하는 애플리케이션
    "django.contrib.auth",
    # 컨텐츠 타입을 처리하며, 제네릭 관계를 지원하는 애플리케이션
    "django.contrib.contenttypes",
    # 사용자의 세션 데이터를 관리하는 애플리케이션
    "django.contrib.sessions",
    # 사용자 간에 메시지를 전달하는 메시징 프레임워크를 활성화하는 애플리케이션
    "django.contrib.messages",
    # 정적 파일(CSS 및 JavaScript 등)을 처리하는 애플리케이션
    "django.contrib.staticfiles",
    # API를 구축하기 위한 Django REST 프레임워크
    "rest_framework",
    # "press"라는 이름의 애플리케이션
    "press",
    # "press_api"라는 이름의 애플리케이션
    "press_api",
]

# 장고의 모든 요청/ 응답 메세지 사이에 실행되는 특수한 프레임워크,
# 주로 보안에 관한 내용들이 많다.
MIDDLEWARE = [
    # 보안 미들웨어를 제공하는 애플리케이션
    "django.middleware.security.SecurityMiddleware",

    # 사용자 세션 데이터를 처리하는 세션 미들웨어
    "django.contrib.sessions.middleware.SessionMiddleware",

    # 공통 요청 처리를 위한 미들웨어
    "django.middleware.common.CommonMiddleware",

    # CSRF(Cross-Site Request Forgery) 보호를 위한 미들웨어
    "django.middleware.csrf.CsrfViewMiddleware",

    # 사용자 인증을 처리하는 인증 미들웨어
    "django.contrib.auth.middleware.AuthenticationMiddleware",

    # 메시지 전달을 위한 미들웨어
    "django.contrib.messages.middleware.MessageMiddleware",

    # 클릭재킹(X-Frame-Options 헤더) 방어를 위한 미들웨어
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 기준이 되는 urls.py 파일의 경로
ROOT_URLCONF = "leaderboard.urls"

# 장고에서 사용하는 템플릿 시스템에 관한 설정들. 템플릿 해석 엔진과
# 템플릿 폴더의 경로 등을 변견하는데 쓰인다.
TEMPLATES = [
    {
        # 장고 템플릿 엔진을 사용하는 템플릿 설정
        "BACKEND": "django.template.backends.django.DjangoTemplates",

        # 템플릿 디렉터리를 지정하지 않음
        "DIRS": [],

        # 각 애플리케이션의 "templates" 디렉터리를 검사할지 여부
        "APP_DIRS": True,

        # 템플릿 엔진의 설정 옵션
        "OPTIONS": {
            # 컨텍스트 프로세서를 설정하여 템플릿에서 사용 가능한 변수를 정의
            "context_processors": [
                # 디버그 모드 여부를 확인하는 컨텍스트 프로세서
                "django.template.context_processors.debug",
                # 현재 요청과 관련된 정보를 제공하는 컨텍스트 프로세서
                "django.template.context_processors.request",
                # 사용자 인증 정보를 템플릿에 제공하는 컨텍스트 프로세서
                "django.contrib.auth.context_processors.auth",
                # 메시지 프레임워크에서 사용 가능한 메시지를 템플릿에 제공하는 컨텍스트 프로세서
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# 실행을 위한 WSGI 어플리케이션을 설정
WSGI_APPLICATION = "leaderboard.wsgi.application"

# Database 설정
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        # 데이터베이스 엔진을 설정하는 환경 변수 또는 기본값으로 SQLite를 사용
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),

        # 데이터베이스의 이름을 설정하는 환경 변수 또는 기본값으로 프로젝트 디렉터리 내의 db.sqlite3 파일 사용
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),

        # 데이터베이스 사용자를 설정하는 환경 변수 또는 기본값으로 "user" 사용
        "USER": os.environ.get("SQL_USER", "user"),

        # 데이터베이스 사용자의 비밀번호를 설정하는 환경 변수 또는 기본값으로 "password" 사용
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),

        # 데이터베이스 호스트를 설정하는 환경 변수 또는 기본값으로 "localhost" 사용
        "HOST": os.environ.get("SQL_HOST", "localhost"),

        # 데이터베이스 연결 포트를 설정하는 환경 변수 또는 기본값으로 "5432" 사용
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# 비밀번호 검증을 위한 설정.
AUTH_PASSWORD_VALIDATORS = [
    {
        # 사용자 속성과 유사한 패스워드를 방지하는 검증기
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        # 패스워드의 최소 길이를 확인하는 검증기
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        # 일반적인 패스워드(너무 흔한 패스워드)를 방지하는 검증기
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        # 숫자만으로 이루어진 패스워드를 방지하는 검증기
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]



# 다국어에 관한 설정들
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

# 다국어 지원 활성화
USE_I18N = True
# 시간대 지원 활성화
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = "/static/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 장고 restful api 페이지에서 페이지 구분 사용
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
}
